package com.multithreading;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class BankAcc{
    private int balance=1000;
    private  Lock lock = new ReentrantLock();

    void withdraw(int amount){
        System.out.println(Thread.currentThread().getName() +" is trying to withdraw "+amount);
        try{
            if (lock.tryLock(5000, TimeUnit.MILLISECONDS)){
                if (balance>amount){
                    try{
                    System.out.println(Thread.currentThread().getName()+ " is withdrawing: "+ amount);
                        Thread.sleep(3000);
                    balance-=amount;
                    System.out.println(Thread.currentThread().getName()+" Your total balance is: "+balance);
                    }catch (Exception e){}
                    finally {
                        lock.unlock();
                    }
                }else{
                    System.out.println(Thread.currentThread().getName() + "babu insufficient balance hai");
                    Thread.sleep(8000);
                }

            }else{
                System.out.println(Thread.currentThread().getName() + " Sorry lock has been taken");
            }
        }catch (Exception e){

        }

    }


}

